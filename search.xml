<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/xublog/2020/03/28/hello-world/"/>
      <url>/xublog/2020/03/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用verdaccio来搭建私有NPM仓库</title>
      <link href="/xublog/2020/03/18/%E4%BD%BF%E7%94%A8verdaccio%E6%9D%A5%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89NPM%E4%BB%93%E5%BA%93/"/>
      <url>/xublog/2020/03/18/%E4%BD%BF%E7%94%A8verdaccio%E6%9D%A5%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89NPM%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>作为一个前端开发，不知道npm那你就落后了。npm是一个包管理工具，我们可以从这上面下载任何你想用到的依赖包，但是npm毕竟是国外的，有时候下载起来，速度非常的慢（你们都懂的^_^），所以，要是我们可以又一个自己的这样的包管理器，上传/下载还非常方便，而且是私有的，不是任何人都可以访问、上传、下载依赖包，这样是不是就非常的nice了，那我们就快快来看看是如何来搭建自己的npm私有仓库的吧。</p><h3 id="为什么要搭建npm服务器"><a href="#为什么要搭建npm服务器" class="headerlink" title="为什么要搭建npm服务器"></a>为什么要搭建npm服务器</h3><ul><li>便于开发上的协作，统一管理，方便开发和使用</li><li>私有性、安全性。由于一些公司业务上原因，存在一些私有的开发模块，这些模块并不希望外人看见，但是又要方便内部人员使用</li><li>快速。搭建的私有npm服务器，本身可以自带常用的package缓存，cnpm 有一些包存在路径问题,而npm 的速度有些感人,自建的服务器会缓存下载过的包,能节省时间</li></ul><h4 id="搭建工具：verdaccio"><a href="#搭建工具：verdaccio" class="headerlink" title="搭建工具：verdaccio"></a>搭建工具：verdaccio</h4><p><strong>verdaccio</strong>是 <em>sinopia</em> 开源框架的一个fork，但是由于一些原因，<em>sinopia</em> 已经没有维护了，还有很多bug，出现问题就只有自己解决咯。</p><p>废话就不多说了，那就开始吧！</p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>  安装<strong>node</strong>环境。可以到网址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>下载，可以根据不同平台系统选择你需要的 Node.js 安装包。<br>  具体就不在细述了，可参考教程：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><p>  安装<strong>verdaccio</strong>。使用 npm 全局安装即可。</p><blockquote><p>npm install verdaccio -g</p></blockquote><p>  如果在安装过程中报 grywarn的权限错的话，那么需要加上 –unsafe-perm, 如下命令：</p><blockquote><p>npm install verdaccio -g –unsafe-perm</p></blockquote><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>  安装完成后，命令行中输入 <code>verdaccio</code> ,如下所示：<br>  <img src="https://s1.ax1x.com/2020/03/21/8RlxW4.png" alt="图片示例"></p><p>  然后再浏览器中运行 <strong><a href="http://localhost:4873" target="_blank" rel="noopener">http://localhost:4873</a></strong> 就可以看到如下图示：<br>  <img src="https://s1.ax1x.com/2020/03/21/8R1jBt.png" alt="成功示例"></p><p>  上图中，config file就是安装文件的目录，进入目录找到配置文件config.yaml。配置如下，最后一行是新增配置：</p><pre><code>  #  # This is the default config file. It allows all users to do anything,  # so don&#39;t use it on production systems.  #  # Look here for more config file examples:  # https://github.com/verdaccio/verdaccio/tree/master/conf  #  # path to a directory with all packages  storage: /Users/tugenhua/.local/share/verdaccio/storage  auth:    htpasswd:      file: ./htpasswd      # Maximum amount of users allowed to register, defaults to &quot;+inf&quot;.      # You can set this to -1 to disable registration.      #max_users: 1000  # a list of other known repositories we can talk to  uplinks:    npmjs:      url: https://registry.npmjs.org/  packages:    &#39;@*/*&#39;:      # scoped packages      access: $all      publish: $authenticated      proxy: npmjs    &#39;**&#39;:      # allow all users (including non-authenticated users) to read and      # publish all packages      #      # you can specify usernames/groupnames (depending on your auth plugin)      # and three keywords: &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot;      access: $all      # allow all known users to publish packages      # (anyone can register by default, remember?)      publish: $authenticated      # if package is not available locally, proxy requests to &#39;npmjs&#39; registry      proxy: npmjs  # To use `npm audit` uncomment the following section  middlewares:    audit:      enabled: true  # log settings  logs:    - {type: stdout, format: pretty, level: http}    #- {type: file, path: verdaccio.log, level: info}  # 如下是新增的，默认是没有的，只能在本机访问，添加完成后就可以在外网访问了~    listen: 0.0.0.0:4873</code></pre><p>  启动服务时，一般会通过pm2来管理进程<br>  安装：<code>npm install -g pm2</code><br>  启动：<code>pm2 start which verdaccio</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>// 当前npm 服务指向 本地<br><code>npm set registry http://192.168.101.104:4873</code><br>// 注册用户<br><code>npm adduser –registry http://192.168.101.104:4873</code></p><p>// 查看当前用户,是否是注册用户.<br><code>npm who am i</code></p><h3 id="npm发布包"><a href="#npm发布包" class="headerlink" title="npm发布包"></a>npm发布包</h3><p>新建一个文件夹，npm init初始化一个package.json，完成新建包后，就使用<code>npm publish</code>发布包。</p><blockquote><p>npm publish –registry <a href="http://192.168.101.104:4873" target="_blank" rel="noopener">http://192.168.101.104:4873</a></p></blockquote><p>发布完成后，在刷新下 <a href="http://192.168.101.104:4873/#/" target="_blank" rel="noopener">http://192.168.101.104:4873/#/</a> 就可以看到我们刚刚发布的包了</p><h3 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h3><p><code>npm install [package name]</code></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
